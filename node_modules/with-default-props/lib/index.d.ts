declare type RequiredKeys<T> = {
    [K in keyof T]-?: ({} extends {
        [P in K]: T[K];
    } ? never : K);
}[keyof T];
declare type MissingProps<Defaults, Props> = Pick<Props, Exclude<keyof Props, RequiredKeys<Defaults>>>;
declare type WithDefaultProps<Defaults, Props> = MissingProps<Defaults, Props> & {
    [P in RequiredKeys<Defaults>]?: Defaults[P];
};
export declare function withDefaultProps<Defaults, Props, Ret, RefParam>(Comp: (props: Props, ref: RefParam) => Ret, defaults: Defaults): (props: WithDefaultProps<Defaults, Props>, ref?: RefParam) => Ret;
export default withDefaultProps;
//# sourceMappingURL=index.d.ts.map